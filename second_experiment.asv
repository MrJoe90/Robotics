classdef second_experiment

   properties (SetAccess = public)
        clientID % The variable to manage the Coppellia socket client
        leftMotor % right_wheel front handler
        rightMotor  % left wheel front handler
        front_left
        front_right
        sensorL
        sensorR    
        map 
        logic_map
        vrep       %  variable for the api
        to_do
        current_x
        current_y
        keyboard_event
        speed
        position
        coordinate
        robot
        random_direction
   end
   
   methods

       function self = second_experiment()
             close all
             clc
             %using the prototype file (remoteApiProto.m)
             self.to_do = 1;
             self.vrep=remApi('remoteApi'); 
             self.vrep.simxFinish(-1);  % ended all the pended connection
             self.clientID =self.vrep.simxStart('127.0.0.1',19999,true,true,5000,5);
             
             %disp('inizio')
             errors_config=[];
             self.logic_map = zeros(10,5);
             self.logic_map(1,2)=1;
             %self.logic_map(self.logic_map==0) = NaN; % Changing the value of x. If you need it preserved, save to a new variable.
             %h = plot(1:numel(self.logic_map),1:self.logic_map,'k.');
             %set(h,'MarkerSize',24)
             %xlim([0.5 numel(self.logic_map)+0.5])
             self.map = sparse(self.logic_map);
             spy(self.map);
             %self.logic_map = self.logic_map+1/2;
             self.current_x=0;
             self.current_y=3; 
             self.speed=0.5;
             self.position=0;
             
             linkdata on;

             if self.clientID>-1
                   disp ("Client connected..");
                   
                  [gestore,self.leftMotor]=self.vrep.simxGetObjectHandle(self.clientID,'Pioneer_p3dx_leftMotor',self.vrep.simx_opmode_oneshot_wait);
                  [gestore,self.rightMotor]=self.vrep.simxGetObjectHandle(self.clientID,'Pioneer_p3dx_rightMotor',self.vrep.simx_opmode_oneshot_wait);
                  [gestore,self.front_left]=self.vrep.simxGetObjectHandle(self.clientID,'Front_Left',self.vrep.simx_opmode_oneshot_wait);
                  [gestore,self.front_right]=self.vrep.simxGetObjectHandle(self.clientID,'Front_Right',self.vrep.simx_opmode_oneshot_wait);
                  [gestore,self.sensorL]=self.vrep.simxGetObjectHandle(self.clientID,'Pioneer_p3dx_ultrasonicSensor1',self.vrep.simx_opmode_oneshot_wait);
                  [gestore,self.sensorR]=self.vrep.simxGetObjectHandle(self.clientID,'Pioneer_p3dx_ultrasonicSensor2',self.vrep.simx_opmode_oneshot_wait);
                  [gestore,self.robot]=self.vrep.simxGetObjectHandle(self.clientID,'Robot_Learning',self.vrep.simx_opmode_oneshot_wait);
                
                  [gestore,self.position] = self.vrep.simxGetObjectPosition(self.clientID,self.robot,-1,self.vrep.simx_opmode_streaming);

                  for i=1: length(errors_config)
                     if errors_config(i)~= 0
                         disp('I cannot communicate properly with Coppelia due to an handler error');
                         break
                     end
                   end

            else
                  disp("No response from the socket interface..");
                  self.to_do=0;
             end
 
 end   

   
 function run(self)


      while self.to_do

          %[err,self.position] = sim.simxGetObjectPosition(self.clientID,self.keyboard_holder,-1,self.vrep.simx_opmode_streaming);
           disp(self.position);
          [errorCode, detectionState1, detectedPoint1, detectedObjectHandle, detectedSurfaceNormalVector] = self.vrep.simxReadProximitySensor(self. clientID, self.front_left, self.vrep.simx_opmode_streaming);
          [errorCode, detectionState3, detectedPoint3, detectedObjectHandle, detectedSurfaceNormalVector] = self.vrep.simxReadProximitySensor(self.clientID, self.sensorL, self.vrep.simx_opmode_streaming);
          [errorCode, detectionState4, detectedPoint4, detectedObjectHandle, detectedSurfaceNormalVector] = self.vrep.simxReadProximitySensor(self.clientID, self.sensorR, self.vrep.simx_opmode_streaming);
          [gestore,self.position] = self.vrep.simxGetObjectPosition(self.clientID,self.robot,-1,self.vrep.simx_opmode_buffer);
          disp(self.position)

         if detectionState1==1 | detectionState3==1 | detectionState4 == 1 
                 disp("sensors 1");
                 %disp(cast(detectedPoint1(2)*100,"int8"))
                 x= abs(self.position(1))+4.5
                 y= abs(self.position(2))+2
                 self.logic_map(cast(x,"int8"),cast(y,"int8"))=1;
                 self.map= sparse(self.logic_map);
                 close all
                 spy(self.map);
                 temp_variable = self.random_direction
                 while self.random_direction ~= temp_variable
                 a = 1;
                 b = 4;
                 self.random_direction = (b-a).*rand(1000,1) + a;
                 end



                 %self.map(cast(detectedPoint1(2)*100,"int8"),cast(detectedPoint1(1)*100,"int8"),'.', 'MarkerSize', 30);
         else 
             disp ("Nothing in Range");
         end

    if (self.random_direction==1)
        disp("left");
        self.vrep.simxSetJointTargetVelocity(self.clientID, self.leftMotor, -self.speed, self.vrep.simx_opmode_streaming);
        self.vrep.simxSetJointTargetVelocity(self.clientID, self.rightMotor, self.speed, self.vrep.simx_opmode_streaming);
  
    end
    

    if (self.random_direction==2)
        disp("right");
        self.vrep.simxSetJointTargetVelocity(self.clientID, self.leftMotor, self.speed, self.vrep.simx_opmode_streaming);
        self.vrep.simxSetJointTargetVelocity(self.clientID, self.rightMotor, -self.speed, self.vrep.simx_opmode_streaming);
  
    end

    
    if (self.random_direction==3)
        disp("up");
        self.vrep.simxSetJointTargetVelocity(self.clientID, self.leftMotor, self.speed, self.vrep.simx_opmode_streaming);
        self.vrep.simxSetJointTargetVelocity(self.clientID, self.rightMotor, self.speed, self.vrep.simx_opmode_streaming);
    end


    if (self.random_direction==4)
        disp("down");
        self.vrep.simxSetJointTargetVelocity(self.clientID, self.leftMotor, -self.speed, self.vrep.simx_opmode_streaming);
        self.vrep.simxSetJointTargetVelocity(self.clientID, self.rightMotor, -self.speed, self.vrep.simx_opmode_streaming);
  
    end
    




             pause(1);
      end
      
      
          
 end
    
    
   
 end



end


 

 
 
